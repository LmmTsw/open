#include <stdio.h>
#include <stdlib.h>
#define datatype int 
#define maxsize 100
typedef struct{//定义顺序队列，处理小数部分 
	datatype data[maxsize];
	int front,rear;
}seqqueue,*pseqqueue; 
typedef struct {//定义顺序栈 ，处理整数部分 
	datatype date[maxsize];
	int top;
}seqstack,*pseqstack;
pseqqueue init_q()//初始化队列 
{
	pseqqueue q;
	q=(pseqqueue)malloc(sizeof(seqqueue));
	if(q)
	{
		q->front =0;
		q->rear =0;
	}
	return q;
}
int in(pseqqueue q,datatype x)//入队 
{
	if((q->rear +1)%maxsize==q->front )
	{
		printf("队满");
		return -1;
	}
	else
	{
		q->rear =(q->rear +1)%maxsize;
		q->data [q->rear ]=x;
		return 0; 
	}
 } 
int out(pseqqueue q,datatype *x)//出队 
{
	if(q->front ==q->rear &&q)
	{
		printf("队空");
		return -1; 
	}
	else
    {
		q->front =(q->front +1)%maxsize;
		*x=q->data [q->front ];
		return 1;
	}
} 
void destroyqueue(pseqqueue *q)//摧毁队列 
{
	if(*q); 
	free(*q);
	*q=NULL;
 } 
pseqstack init_s()//初始化空栈 
{
	pseqstack s;
	s=(pseqstack)malloc(sizeof(seqstack));
	if(s)
	{
		s->top =-1;
		return s;
	 } 
}
int push(pseqstack s,datatype x)//入栈
{
	if(s->top ==maxsize-1)
	{
	     printf("栈满不能入栈");
	     return 0;
    }
    else
	{
		s->top ++;
		s->date [s->top]=x;
		return 1;
	 }     
} 
int pop(pseqstack s,datatype *x)//出栈 
{
	if(s->top ==-1)
	return 0;//栈为空栈
	else
	{
		*x=s->date [s->top];
		s->top --;
		return 1;
	 } 
}
void destroystack(pseqstack *s)//删除栈 
{
	if(*s) 
	free(*s);
	*s=NULL;
}
int conversionINT(int n,int r) //整数部分进制转换 
{
	pseqstack s;
	datatype x;
	s=init_s();
	if(!r)
	{
		printf("进制不能为零");
		return 0; 
	}
	if(!s)
	{
		printf("初始化失败");
		return 0;
	}
	while(n)
	{
		push(s,n%r);
		n=n/r;
	}
	while(s->top!=-1)
	{
		pop(s,&x);
		printf("%d",x);
	}
	destroystack(&s);
}
int conversionFLOAT(float m,int r)//小数部分进制转换 
{
	pseqqueue q;
	datatype x;
	q=init_q();
	if(!q)
	{
		printf("初始化失败");
		return 0;
	}
	while(q->rear <=6)//取前七位小数
	{
		in(q,m*r);
		m=m*r-(int)(m*r);
	 } 
	 while (q->front !=q->rear)
	 {
	 	out(q,&x);
	 	printf("%d",x);
	 }
	 destroyqueue(&q);
}
int main(int argc, char *argv[]) {
	float s,m;
	int n,r;
	printf("请输入要转换的数字，及10进制以下的进制\n");
	scanf("%f",&s);
	scanf("%d",&r);
	n=(int)(s);
	m=s-n;
	conversionINT(n,r);
	printf(".");
	conversionFLOAT(m,r);	
	return 0;
}
